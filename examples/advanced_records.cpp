// Generated by RPascal Compiler
#include <iostream>
#include <fstream>
#include <string>
#include <array>
#include <set>
#include <algorithm>
#include <cstdint>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cctype>
// Using explicit std:: prefixes to avoid name conflicts

// Pascal file wrapper class
class PascalFile {
private:
    std::fstream stream_;
    std::string filename_;
    
public:
    PascalFile() = default;
    ~PascalFile() { close(); }
    
    void assign(const std::string& filename) {
        filename_ = filename;
    }
    
    void reset() {
        close();
        stream_.open(filename_, std::ios::in);
    }
    
    void rewrite() {
        close();
        stream_.open(filename_, std::ios::out);
    }
    
    void close() {
        if (stream_.is_open()) {
            stream_.close();
        }
    }
    
    bool eof() const {
        return stream_.eof();
    }
    
    std::fstream& getStream() { return stream_; }
    const std::string& getFilename() const { return filename_; }
};

struct Point {
    int32_t x;
    int32_t y;
};

struct Employee {
    int32_t id;
    std::string name;
    double salary;
    bool active;
};

struct Circle {
    Point center;
    double radius;
};

Point p1;
Point p2;
Employee emp;
Circle c;

// Global variables for Pascal system functions
static int pascal_argc = 0;
static char** pascal_argv = nullptr;

int main(int argc, char* argv[]) {
    pascal_argc = argc;
    pascal_argv = argv;

    std::cout << "=== Advanced Record Type Test ===" << std::endl;
    p1.x = 5;
    p1.y = 10;
    std::cout << "Point 1: (" << p1.x << ", " << p1.y << ')' << std::endl;
    p2 = p1;
    p2.x = (p2.x * 2);
    std::cout << "Point 2: (" << p2.x << ", " << p2.y << ')' << std::endl;
    emp.id = 101;
    emp.name = "Alice Smith";
    emp.salary = 75000.50;
    emp.active = true;
    std::cout << "Employee ID: " << emp.id << std::endl;
    std::cout << "Employee Name: " << emp.name << std::endl;
    std::cout << "Employee Salary: " << emp.salary << std::endl;
    std::cout << "Employee Active: " << emp.active << std::endl;
    c.center.x = 100;
    c.center.y = 200;
    c.radius = 15.5;
    std::cout << "Circle center: (" << c.center.x << ", " << c.center.y << ')' << std::endl;
    std::cout << "Circle radius: " << c.radius << std::endl;
    std::cout << "=== All record tests passed! ===" << std::endl;
    return 0;
}

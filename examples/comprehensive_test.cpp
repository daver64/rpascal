// Generated by RPascal Compiler
#include <iostream>
#include <fstream>
#include <string>
#include <array>
#include <set>
#include <algorithm>
#include <cstdint>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cctype>
// Using explicit std:: prefixes to avoid name conflicts

// Pascal file wrapper class
class PascalFile {
private:
    std::fstream stream_;
    std::string filename_;
    
public:
    PascalFile() = default;
    ~PascalFile() { close(); }
    
    void assign(const std::string& filename) {
        filename_ = filename;
    }
    
    void reset() {
        close();
        stream_.open(filename_, std::ios::in);
    }
    
    void rewrite() {
        close();
        stream_.open(filename_, std::ios::out);
    }
    
    void close() {
        if (stream_.is_open()) {
            stream_.close();
        }
    }
    
    bool eof() const {
        return stream_.eof();
    }
    
    std::fstream& getStream() { return stream_; }
    const std::string& getFilename() const { return filename_; }
};

const auto MaxItems = 100;
const auto PI = 3.14159;
const auto TestMessage = "Hello from Constants";
const auto TestChar = 'A';
// Numeric range: TRange = 1..10
using TRange = int;
const int TRange_MIN = 1;
const int TRange_MAX = 10;

// Enumeration: TColor = (Red, Green, Blue)
enum class TColor {
    Red = 0,
    Green = 1,
    Blue = 2
};

// Enum value constants for Pascal compatibility
const TColor Red = TColor::Red;
const TColor Green = TColor::Green;
const TColor Blue = TColor::Blue;

struct TPoint {
    int32_t x;
    int32_t y;
};

using TArray = std::array<int32_t, 5>;

using TStringArray = std::array<std::string, 3>;

int32_t i;
int32_t j;
int32_t count;
double x;
double y;
bool flag;
bool done;
char ch;
std::string message;
TPoint point;
TArray numbers;
TStringArray names;

void ShowMessage_str(std::string msg) {
    std::cout << "Message: " << msg << std::endl;
}

int32_t Add_int_int(int32_t a, int32_t b) {
    int32_t Add_result;
    Add_result = (a + b);
    return Add_result;
}

int32_t Factorial_int(int32_t n) {
    int32_t Factorial_result;
    int32_t result;
    result = 1;
    while ((n > 1)) {
        result = (result * n);
        n = (n - 1);
}
    Factorial_result = result;
    return Factorial_result;
}

void Swap_int_int(int32_t& a, int32_t& b) {
    int32_t temp;
    temp = a;
    a = b;
    b = temp;
}

// Global variables for Pascal system functions
static int pascal_argc = 0;
static char** pascal_argv = nullptr;

int main(int argc, char* argv[]) {
    pascal_argc = argc;
    pascal_argv = argv;

    i = 10;
    j = 20;
    count = Add_int_int(i, j);
    std::cout << "10 + 20 = " << count << std::endl;
    x = 3.14;
    y = 2.0;
    std::cout << "Real division: " << (x / y) << std::endl;
    flag = (i > j);
    done = !(flag);
    std::cout << "10 > 20 is " << flag << std::endl;
    std::cout << "Not (10 > 20) is " << done << std::endl;
    message = "Pascal";
    std::cout << "String: " << message << std::endl;
    std::cout << "Length: " << message.length() << std::endl;
    ch = 'Z';
    std::cout << "Character: " << ch << std::endl;
    std::cout << "ASCII value: " << static_cast<int>(ch) << std::endl;
    ShowMessage_str("Testing procedures");
    std::cout << "Factorial of 5: " << Factorial_int(5) << std::endl;
    if ((i < j)) {
        std::cout << "i is less than j" << std::endl;
} else {
        std::cout << "i is not less than j" << std::endl;
}
    count = 1;
    while ((count <= 3)) {
        std::cout << "Count: " << count << std::endl;
        count = (count + 1);
}
    point.x = 100;
    point.y = 200;
    std::cout << "Point: (" << point.x << ", " << point.y << ')' << std::endl;
    numbers[(1) - 1] = 10;
    numbers[(2) - 1] = 20;
    numbers[(3) - 1] = 30;
    std::cout << "Array: " << numbers[(1) - 1] << ", " << numbers[(2) - 1] << ", " << numbers[(3) - 1] << std::endl;
    std::cout << "Comprehensive test completed!" << std::endl;
    return 0;
}
